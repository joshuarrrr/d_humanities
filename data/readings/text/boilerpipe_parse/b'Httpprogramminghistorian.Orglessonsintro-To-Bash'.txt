By                                       Ian Milligan                                           and James Baker
Reviewed by     Melodee Beals, Allison Hegel, Charlotte Tupman, and Adam Crymble
Recommended for          Beginning                      Users
Introduction to the Bash Command Line
Introduction
Many of the lessons at the Programming Historian require you to enter commands through a Command-Line Interface. The usual way that computer users today interact with their system is through a Graphical-User Interface, or GUI. This means that when you go into a folder, you click on a picture of a file folder; when you run a program, you click on it; and when you browse the web, you use your mouse to interact with various elements on a webpage. Before the rise of GUIs in the late 1980s, however, the primary way to interact with a computer was through a command-line interface.
GUI of Ian Milligan’s Computer
Command-line interfaces have advantages for computer users who need more precision in their work – such as digital historians. They allow for more detail when running some programs, as you can add modifiers to specify exactly how you want your program to run. Furthermore, they can be easily automated through scripts , which are essentially recipes of text-based commands.
There are two main command-line interfaces, or ‘shells,’ that many digital historians use. On OS X or many Linux installations, the shell is known as bash, or the ‘Bourne-again shell.’  For users on Windows-based systems, the command-line interface is by default MS-DOS-based, which uses different commands and syntax , but can often achieve similar tasks. This tutorial provides a basic introduction to the bash terminal, and Windows users can follow along by installing popular shells such as Cygwin or Git Bash (see below).
This lesson uses a Unix shell , which is a command-line interpreter that provides a user interface for the Unix operating system and for Unix-like systems. This lesson will cover a small number of basic commands. By the end of this tutorial you will be able to navigate through your file system and find files, open them, perform basic data manipulation tasks such as combining and copying files, as well as both reading them and making relatively simple edits. These commands constitute the building blocks upon which more complex commands can be constructed to fit your research data or project. Readers wanting a reference guide that goes beyond this lesson are recommended to read Deborah S. Ray and Eric J. Ray, Unix and Linux: Visual Quickstart Guide, 4th edition (2009).
Windows Only: Installing Git Bash
For those on OS X, and most Linux installations, you’re in luck — you already have a bash shell installed. For those of you on Windows, you’ll need to take one extra step and install Git Bash. This can be installed by downloading the most recent ‘Full installer’ at this page . Instructions for installation are available at Open Hatch .
Opening Your Shell
Let’s start up the shell. In Windows, run Git Bash from the directory that you installed it in. You will have to run it as an administrator - to do so, right click on the program and select ‘Run as Administrator.’ In OS X, by default the shell is located in:
Applications -> Utilities -> Terminal
The Terminal.app program on OS X
When you run it, you will see this window.
A blank terminal screen on our OS X workstation
You might want to change the default visual appearance of the terminal, as eyes can strain at repeatedly looking at black text on a white background. In the default OS X application, you can open the ‘Settings’ menu in ‘Preferences’ under Terminal. Click on the ‘Settings’ tab and change it to a new colour scheme. We personally prefer something with a bit less contrast between background and foreground, as you’ll be staring at this a great deal. ‘Novel’ is a soothing one as is the popular Solarized suite of colour palettes. For Windows users, a similar effect can be achieved using the Git Bash Properties tab. To reach this, right-click anywhere in the top bar and select Properties.
The Settings Screen on the OS X Terminal Shell Application
Once you are happy with the interface, let’s get started.
Moving Around Your Computer’s File System
If, when opening a command window, you are unsure of where you are in a computer’s file system, the first step is to find out what directory you are in. Unlike in a graphical system, when in a shell you cannot be in multiple directories at once. When you open up your file explorer on your desktop, it’s revealing files that are within a directory. You can find out what directory you are in through the pwd command, which stands for “print working directory.” Try inputing:
pwd
and hitting enter. If you’re on OS X or Linux, your computer will probably display /users/USERNAME with your own user name in place of USERNAME. For example, Ian’s path on OS X is /users/ianmilligan1/.
Here is where you realize that those on Windows and those on OS X/Linux will have slightly different experiences. On Windows, James is at:
c/users/jbaker
There are minor differences, but fear not; once you’re moving and manipulating files, these platform divergences can fade into the background.
To orient ourselves, let’s get a listing of what files are in this directory. Type
ls
and you will see a list of every file and directory within your current location. Your directory may be cluttered or it may be pristine, but you will at a minimum see some familiar locations. On OS X, for example, you’ll see Applications, Desktop, Documents, Downloads, Library, Pictures, etc.
You may want more information than just a list of files. You can do this by specifying various flags to go with our basic commands. These are additions to a command that provide the computer with a bit more guidance of what sort of output or manipulation you want. To get a list of these, OS X/Linux users can turn to the built-in help program. OS X/Linux users type
man ls
The Manual page for the LS command
Here, you see a listing of the name of the command, the way that you can format this command and what it does. Many of these will not make sense at this stage, but don’t worry; over time you will become more familiar with them. You can explore this page in a variety of ways: the spacebar moves down a page, or you can arrow down and arrow up throughout the document.
To leave the manual page, press
q
and you will be brought back to the command line where you were before entering the manual page.
Try playing around with the man page for the other command you have learned so far, pwd.
Windows users can use the help command, though this command has fewer features than man on OS X/Linux. Enter help to see the help available, and help pwd for an example of the command’s output.
Let’s try using a few of those options you saw in the man page for ls. Perhaps you only want to see TXT files that are in our home directory. Type
ls *.txt
which returns a list of text files, if you have any in your home directory (you may not, and that is OK as well). The * command is a wildcard — it stands for ‘anything.’ So, in this case, you’re indicating that anything that fits the pattern:
[anything.txt]
will be displayed. Try out different combinations. If, for example, you had several files in the format 1-Canadian.txt, 2-Canadian.txt, and so forth, the command ls *-Canadian.txt would display them all but exclude all other files (those that do not match the pattern).
Say you want more information. In that long man page, you saw an option that might be useful:
-l      (The lowercase letter ``ell''.)  List in long format.  (See below.)  If         the output is to a terminal, a total sum for all the file sizes is out-         put on a line before the long listing.
So, if you type
ls -l
the computer returns a long list of files that contains information similar to what you’d find in your finder or explorer: the size of the files in bites, the date it was created or last modified, and the file name. However, this can be a bit confusing: you see that a file test.html is ‘6020’ bits large. In commonplace language, you are more used to units of measurement like bytes, kilobytes, megabytes, and gigabytes.
Luckily, there’s another flag:
-h      When used with the -l option, use unit suffixes: Byte, Kilobyte,         Megabyte, Gigabyte, Terabyte and Petabyte in order to reduce the number         of digits to three or less using base 2 for sizes.
When you want to use two flags, you can just run them together. So, by typing
ls -lh
you receive output in a human-readable format; you learn that that 6020 bits is also 5.9KB, that another file is 1 megabyte, and so forth.
These options are very important. In other lessons within the Programming Historian, you’ll see them. Wget , MALLET , and Pandoc all use the same syntax. Luckily, you do not need to memorize syntax; instead, keep these lessons handy so you can take a quick peek if you need to tweak something. These lessons can all be done in any order.
You’ve now spent a great deal of time in your home directory. Let’s go somewhere else. You can do that through the cd or Change Directory command.
If you type
cd desktop
you are now on your desktop. This is akin to you ‘double-clicking’ on the ‘desktop’ folder within a file explorer. To double check, type pwd and you should see something like:
/Users/ianmilligan1/desktop
Try playing around with those earlier commands: explore your current directory using the ls command.
If you want to go back, you can type
cd ..
This moves us ‘up’ one directory, putting us back in /Users/ianmilligan1/. If you ever get completely lost, the command
cd --
will bring you right back to the home directory, right where you started.
Try exploring: visit your documents directory, your pictures, folders you might have on your desktop. Get used to moving in and out of directories. Imagine that you are navigating a tree structure . If you’re on the desktop, you won’t be able to cd documents as it is a ‘child’ of your home directory, whereas your Desktop is a ‘sibling’ of the Documents folder. To get to a sibling, you have to go back to the common parent. To do this, you will have to back up to your home directory (cd ..) and then go forward again to cd documents.
Being able to navigate your file system using the bash shell is very important for many of the lessons at the Programming Historian. As you become more comfortable, you’ll soon find yourself skipping directly to the directory that you want. In our case, from anywhere on our system, you could type
cd /users/ianmilligan1/mallet-2.0.7
or, on Windows, something like
cd c:\mallet-2.0.7\
and be brought to our MALLET directory for topic modeling .
Finally, try
in OS X or
explorer .
in Windows. That command will open up your GUI at the current directory. Make sure to leave a space between open or explorer and the period.
Interacting with Files
As well as navigating directories, you can interact with files on the command line: you can read them, open them, run them, and even edit them, often without ever having to leave the interface. There is some debate over why one would do this. The primary reason is the seamless experience of working on the command line: you never have to pick up your mouse or touch your track pad, and, although it has a steep learning curve it can eventually become a sole writing environment. Furthermore, many programs require you to use the command line to operate with them. Since you’ll be using programs on the command line, it can often be quicker to make small edits without switching into a separate program. For some of these arguments, see Jon Beltran de Heredia’s “Why, oh WHY, do those #?@! nutheads use vi?” .
Here’s a few basic ways to do interact with files.
First, you can create a new directory so you can engage with text files. We will create it on your desktop, for convenience’s sake. You can always move it later. Navigate to your desktop using your shell, and type:
mkdir ProgHist-Text
This creates a directory named, you guessed it, ‘ProgHist-Text.’ In general, it’s good to avoid putting spaces in your filenames and directories when using the command line (there are workarounds, of course, but this approach is simpler). You can look at your desktop to verify it has worked. Now, move into that directory (remember, that would be cd ProgHist-Text).
But wait! There’s a trick to make things a bit quicker. Go up one directory (cd .. - which will take you back to the Desktop). To navigate to the ProgHist-Text directory you could type cd ProgHist-Text. Alternatively, you could type cd Prog and then hit tab. You will notice that the interface completes the line to cd ProgHist-Text. Hitting tab at any time within the shell will prompt it to attempt to auto-complete the line based on the files or sub-directories in the current directory. This is case sensitive, however (i.e. in the previous example, cd prog would not auto complete to ProgHist-Text. Where two or more files have the same characters, the auto-complete will only fill up to the first point of difference. We would encourage using this method throughout the lesson to see how it behaves.
Now you need to find a basic text file to help us with the example. Why don’t you use a book that you know is long, such as Leo Tolstoy’s epic War and Peace. The text file is availiable via Project Gutenberg . If you have already installed wget , you can just type
wget http://www.gutenberg.org/files/2600/2600-0.txt
If you do not have wget installed, download the text itself using your browser. Go to the link above, and, in your browser, use the ‘Save Page as..’ command in your ‘file menu.’ Save it in your new ‘ProgHist-Text directory.’ Now, when you type
ls -lh
you see
-rw-r–r–+ 1 ianmilligan1  staff   3.1M  1 May 10:03 pg2600.txt
You can read the text within this file in a few different ways. First, you can tell our computer that you want to read it using the standard program that you use to open text files. By default, this may be TextEdit on OS X or Notepad in Windows. To open a file, just type
open pg2600.txt
